# =============================================================================
# ENTERPRISE-GRADE HYPERSCALE CACHING ARCHITECTURE
# =============================================================================
# Multi-Level Adaptive Caching System with Circuit Breaker Protection
# Designed for sub-10ms P99 latency and exascale workloads
# =============================================================================

default: &default
  # ===========================================================================
  # CORE PERFORMANCE OPTIMIZATION
  # ===========================================================================
  store_options:
    # Adaptive memory allocation based on system resources and load patterns
    max_size: <%= ENV.fetch('RAILS_CACHE_MAX_SIZE', '1.gigabyte').to_s %>
    # Intelligent compression for memory efficiency
    compress: <%= ENV.fetch('RAILS_CACHE_COMPRESS', 'true') %>
    # Namespace isolation with environment-aware prefixes
    namespace: <%= "#{Rails.env}_#{ENV.fetch('CACHE_NAMESPACE', 'default')}" %>

    # ==========================================================================
    # ADVANCED EXPIRATION STRATEGIES
    # ==========================================================================
    # Intelligent TTL based on data type and access patterns
    default_ttl: <%= ENV.fetch('CACHE_DEFAULT_TTL', '3600').to_i %>
    # Sliding expiration for frequently accessed data
    sliding_ttl: <%= ENV.fetch('CACHE_SLIDING_TTL', 'true') %>

    # ==========================================================================
    # CIRCUIT BREAKER PROTECTION
    # ==========================================================================
    # Failover protection for cache layer resilience
    circuit_breaker:
      failure_threshold: <%= ENV.fetch('CACHE_CB_FAILURE_THRESHOLD', '5').to_i %>
      recovery_timeout: <%= ENV.fetch('CACHE_CB_RECOVERY_TIMEOUT', '30').to_i %>
      expected_exceptions:
        - Redis::ConnectionError
        - Redis::TimeoutError
        - Redis::CannotConnectError

    # ==========================================================================
    # SECURITY HARDENING
    # ==========================================================================
    # Encryption at rest for sensitive cached data
    encryption:
      enabled: <%= ENV.fetch('CACHE_ENCRYPTION_ENABLED', 'false') %>
      algorithm: <%= ENV.fetch('CACHE_ENCRYPTION_ALGORITHM', 'AES-256-GCM') %>

    # ==========================================================================
    # PERFORMANCE MONITORING & OBSERVABILITY
    # ==========================================================================
    # Comprehensive metrics collection for cache performance analysis
    metrics:
      enabled: <%= ENV.fetch('CACHE_METRICS_ENABLED', 'true') %>
      collection_interval: <%= ENV.fetch('CACHE_METRICS_INTERVAL', '60').to_i %>
      # Track hit/miss ratios, response times, memory usage
      track_performance: true
      # Monitor cache key patterns for optimization insights
      track_key_patterns: <%= ENV.fetch('CACHE_TRACK_PATTERNS', 'true') %>

    # ==========================================================================
    # ADAPTIVE SCALING
    # ==========================================================================
    # Dynamic cache sizing based on load patterns
    adaptive_sizing:
      enabled: <%= ENV.fetch('CACHE_ADAPTIVE_SIZING', 'true') %>
      # Monitor memory pressure and adjust accordingly
      memory_pressure_threshold: <%= ENV.fetch('CACHE_MEMORY_PRESSURE_THRESHOLD', '0.8').to_f %>
      # Scale up during high load, scale down during low load
      scale_up_factor: <%= ENV.fetch('CACHE_SCALE_UP_FACTOR', '1.5').to_f %>
      scale_down_factor: <%= ENV.fetch('CACHE_SCALE_DOWN_FACTOR', '0.7').to_f %>

  # ============================================================================
  # CACHE WARMING & PRELOADING STRATEGIES
  # ============================================================================
  # Predictive cache warming for improved user experience
  warming:
    enabled: <%= ENV.fetch('CACHE_WARMING_ENABLED', 'true') %>
    # Preload critical data on application startup
    preload_on_startup: <%= ENV.fetch('CACHE_PRELOAD_STARTUP', 'true') %>
    # Warm cache during low-traffic periods
    background_warming: <%= ENV.fetch('CACHE_BACKGROUND_WARMING', 'true') %>
    # Predictive warming based on usage patterns
    predictive_warming: <%= ENV.fetch('CACHE_PREDICTIVE_WARMING', 'true') %>

    # Critical data patterns to warm
    critical_patterns:
      - 'user:*:profile'           # User profiles for authenticated users
      - 'product:*:inventory'      # Product inventory for active listings
      - 'category:*'               # Category hierarchies for navigation
      - 'exchange_rates:*'         # Currency conversion data
      - 'shipping_rates:*'         # Regional shipping calculations

  # ============================================================================
  # INTELLIGENT CACHE INVALIDATION
  # ============================================================================
  # Dependency-based invalidation for data consistency
  invalidation:
    # Track dependencies between cached items
    dependency_tracking: <%= ENV.fetch('CACHE_DEPENDENCY_TRACKING', 'true') %>
    # Cascade invalidation when parent data changes
    cascade_invalidation: <%= ENV.fetch('CACHE_CASCADE_INVALIDATION', 'true') %>
    # Background invalidation for non-critical data
    background_invalidation: <%= ENV.fetch('CACHE_BACKGROUND_INVALIDATION', 'true') %>

    # Invalidation strategies by data type
    strategies:
      user_data:
        strategy: 'dependency_chain'
        cascade_depth: 3
        background_invalidate: true
      product_data:
        strategy: 'pattern_based'
        patterns: ['product:*', 'category:*', 'inventory:*']
        cascade_invalidate: true
      analytics_data:
        strategy: 'time_based'
        ttl: <%= ENV.fetch('ANALYTICS_CACHE_TTL', '300').to_i %>
        sliding: true

# =============================================================================
# DEVELOPMENT ENVIRONMENT
# =============================================================================
# Optimized for developer productivity with comprehensive debugging
development:
  <<: *default

  # Enhanced debugging capabilities for development
  store_options:
    <<: *default.store_options
    # Verbose logging for cache operations
    debug: true
    # Track cache key origins for debugging
    track_origins: <%= ENV.fetch('CACHE_TRACK_ORIGINS', 'true') %>
    # Performance profiling in development
    profile_performance: <%= ENV.fetch('CACHE_PROFILE_DEV', 'true') %>

  # Aggressive cache warming for development testing
  warming:
    <<: *default.warming
    enabled: true
    preload_on_startup: true
    # More frequent warming in development
    warming_interval: <%= ENV.fetch('DEV_CACHE_WARMING_INTERVAL', '300').to_i %>

# =============================================================================
# TEST ENVIRONMENT
# =============================================================================
# Optimized for test reliability and speed
test:
  <<: *default

  # Test-optimized settings
  store_options:
    <<: *default.store_options
    # Faster cleanup for tests
    default_ttl: <%= ENV.fetch('TEST_CACHE_TTL', '60').to_i %>
    # Disable expensive features in tests
    metrics:
      enabled: false
    adaptive_sizing:
      enabled: false

  # Minimal warming for tests
  warming:
    <<: *default.warming
    enabled: false

# =============================================================================
# PRODUCTION ENVIRONMENT
# =============================================================================
# Hyperscale configuration for mission-critical workloads
production:
  # Use Redis Cluster for horizontal scalability
  database: <%= ENV.fetch('CACHE_STORE', 'redis://localhost:6379/0') %>
  <<: *default

  # Production-optimized store options
  store_options:
    <<: *default.store_options

    # ==========================================================================
    # REDIS CLUSTER CONFIGURATION
    # ==========================================================================
    redis:
      # Connection pooling for high concurrency
      pool_size: <%= ENV.fetch('REDIS_POOL_SIZE', '25').to_i %>
      pool_timeout: <%= ENV.fetch('REDIS_POOL_TIMEOUT', '5').to_i %>

      # Cluster configuration for horizontal scaling
      cluster:
        enabled: <%= ENV.fetch('REDIS_CLUSTER_ENABLED', 'false') %>
        nodes: <%= ENV.fetch('REDIS_CLUSTER_NODES', '').split(',').compact %>
        # Automatic failover and retry logic
        retry_attempts: <%= ENV.fetch('REDIS_RETRY_ATTEMPTS', '3').to_i %>
        retry_delay: <%= ENV.fetch('REDIS_RETRY_DELAY', '1').to_f %>

      # Read/write splitting for performance
      read_from_replicas: <%= ENV.fetch('REDIS_READ_REPLICAS', 'true') %>

    # ==========================================================================
    # ADVANCED PRODUCTION FEATURES
    # ==========================================================================
    # Multi-level caching strategy
    multi_level:
      # Memory cache as L1 for ultra-low latency
      l1_enabled: <%= ENV.fetch('CACHE_L1_ENABLED', 'true') %>
      l1_size: <%= ENV.fetch('CACHE_L1_SIZE', '256.megabytes') %>

      # Redis as L2 for consistency across instances
      l2_enabled: <%= ENV.fetch('CACHE_L2_ENABLED', 'true') %>
      l2_ttl: <%= ENV.fetch('CACHE_L2_TTL', '3600').to_i %>

      # Persistent store as L3 for fallback
      l3_enabled: <%= ENV.fetch('CACHE_L3_ENABLED', 'false') %>
      l3_store: <%= ENV.fetch('CACHE_L3_STORE', 'file_store') %>

    # ==========================================================================
    # DISTRIBUTED COORDINATION
    # ==========================================================================
    # Coordinate cache across multiple instances
    distributed:
      enabled: <%= ENV.fetch('CACHE_DISTRIBUTED_ENABLED', 'true') %>
      # Consistent hashing for key distribution
      consistent_hashing: true
      # Cache synchronization across instances
      synchronization: <%= ENV.fetch('CACHE_SYNCHRONIZATION', 'true') %>

      # Coordination backend for cache invalidation
      coordination_backend: <%= ENV.fetch('CACHE_COORDINATION_BACKEND', 'redis') %>

    # ==========================================================================
    # ADVANCED OBSERVABILITY
    # ==========================================================================
    observability:
      # Export metrics to monitoring systems
      metrics_export:
        enabled: <%= ENV.fetch('CACHE_METRICS_EXPORT', 'true') %>
        backend: <%= ENV.fetch('CACHE_METRICS_BACKEND', 'prometheus') %>
        endpoint: <%= ENV.fetch('CACHE_METRICS_ENDPOINT', 'http://monitoring:9091/metrics') %>

      # Distributed tracing integration
      tracing:
        enabled: <%= ENV.fetch('CACHE_TRACING_ENABLED', 'true') %>
        service_name: <%= ENV.fetch('CACHE_TRACING_SERVICE', 'rails-cache') %>
        sample_rate: <%= ENV.fetch('CACHE_TRACING_SAMPLE_RATE', '0.1').to_f %>

      # Performance profiling
      profiling:
        enabled: <%= ENV.fetch('CACHE_PROFILING_ENABLED', 'true') %>
        # Profile slow cache operations
        profile_threshold_ms: <%= ENV.fetch('CACHE_PROFILE_THRESHOLD', '100').to_i %>

  # ============================================================================
  # PRODUCTION CACHE WARMING STRATEGY
  # ============================================================================
  warming:
    <<: *default.warming
    enabled: true

    # Critical business data patterns
    critical_patterns:
      - 'user:*:profile'
      - 'user:*:preferences'
      - 'product:*:active'
      - 'product:*:pricing'
      - 'inventory:*:available'
      - 'category:*:hierarchy'
      - 'exchange_rates:*'
      - 'shipping:*:rates'
      - 'fraud:*:patterns'
      - 'recommendations:*'

    # Predictive warming based on business intelligence
    predictive:
      # Warm based on user behavior patterns
      user_behavior: <%= ENV.fetch('CACHE_PREDICTIVE_USER_BEHAVIOR', 'true') %>
      # Warm based on seasonal patterns
      seasonal: <%= ENV.fetch('CACHE_PREDICTIVE_SEASONAL', 'true') %>
      # Warm based on trending products
      trending: <%= ENV.fetch('CACHE_PREDICTIVE_TRENDING', 'true') %>

      # Machine learning integration for prediction
      ml_integration:
        enabled: <%= ENV.fetch('CACHE_ML_INTEGRATION', 'false') %>
        model_endpoint: <%= ENV.fetch('CACHE_ML_MODEL_ENDPOINT', '') %>
        prediction_confidence_threshold: <%= ENV.fetch('CACHE_ML_CONFIDENCE_THRESHOLD', '0.8').to_f %>

    # Cache warming schedule
    schedule:
      # Warm during off-peak hours
      off_peak_warming: <%= ENV.fetch('CACHE_OFF_PEAK_WARMING', 'true') %>
      # Emergency warming for critical failures
      emergency_warming: <%= ENV.fetch('CACHE_EMERGENCY_WARMING', 'true') %>
      # Continuous warming for highly dynamic data
      continuous_warming: <%= ENV.fetch('CACHE_CONTINUOUS_WARMING', 'false') %>

  # ============================================================================
  # PRODUCTION SECURITY HARDENING
  # ============================================================================
  security:
    # End-to-end encryption for sensitive data
    encryption:
      enabled: <%= ENV.fetch('CACHE_ENCRYPTION_PRODUCTION', 'true') %>
      algorithm: <%= ENV.fetch('CACHE_ENCRYPTION_ALGORITHM', 'AES-256-GCM') %>
      key_rotation_days: <%= ENV.fetch('CACHE_KEY_ROTATION_DAYS', '30').to_i %>

    # Access control and authorization
    access_control:
      # Namespace-based isolation
      namespace_isolation: <%= ENV.fetch('CACHE_NAMESPACE_ISOLATION', 'true') %>
      # User-based access restrictions
      user_based_restrictions: <%= ENV.fetch('CACHE_USER_RESTRICTIONS', 'false') %>
      # Rate limiting for cache operations
      rate_limiting: <%= ENV.fetch('CACHE_RATE_LIMITING', 'true') %>

    # Audit logging for compliance
    audit:
      enabled: <%= ENV.fetch('CACHE_AUDIT_LOGGING', 'true') %>
      log_sensitive_operations: <%= ENV.fetch('CACHE_AUDIT_SENSITIVE', 'true') %>
      retention_days: <%= ENV.fetch('CACHE_AUDIT_RETENTION', '90').to_i %>

# =============================================================================
# ENVIRONMENT-SPECIFIC OVERRIDES
# =============================================================================

# Staging environment for production-like testing
staging:
  <<: *production
  store_options:
    <<: *default.store_options
    # Reduced resource allocation for staging
    max_size: <%= ENV.fetch('STAGING_CACHE_MAX_SIZE', '512.megabytes') %>
    # More frequent metrics for monitoring validation
    metrics:
      collection_interval: <%= ENV.fetch('STAGING_METRICS_INTERVAL', '30').to_i %>

# High-traffic production variant
production_high_traffic:
  <<: *production
  store_options:
    <<: *production.store_options
    # Increased resources for high traffic
    max_size: <%= ENV.fetch('HIGH_TRAFFIC_CACHE_SIZE', '4.gigabytes') %>
    # Aggressive performance optimizations
    redis:
      pool_size: <%= ENV.fetch('HIGH_TRAFFIC_REDIS_POOL', '50').to_i %>

# Low-latency production variant
production_low_latency:
  <<: *production
  store_options:
    <<: *production.store_options
    # Optimized for minimal latency
    multi_level:
      l1_size: <%= ENV.fetch('LOW_LATENCY_L1_SIZE', '512.megabytes') %>
      # Faster L2 for latency-critical operations
      l2_ttl: <%= ENV.fetch('LOW_LATENCY_L2_TTL', '1800').to_i %>
