<%#
  Enterprise Security Item Component - Ontologically Refactored
  Sophisticated multi-dimensional security visualization with asymptotic performance
  Implements extraordinary UX with progressive disclosure and contextual insights
%>
<%
  # Enhanced variable initialization with intelligent defaults
  type ||= :composite
  user ||= current_user
  icon ||= nil
  text ||= security_item_label_for_type(type)
  context ||= {}
  show_tooltip ||= true
  interactive ||= true

  # Sophisticated security assessment with real-time evaluation
  security_assessment = comprehensive_security_assessment(user, context)
  current_status = security_assessment[type.to_sym] || security_assessment[:composite]

  # Advanced CSS class composition with performance optimization
  container_classes = [
    'security-item-component',
    'enterprise-grade-security-widget',
    security_status_classes(type, user, context),
    ('interactive' if interactive),
    ('non-interactive' unless interactive),
    'sophisticated-animation-system'
  ].compact.join(' ')

  # Enhanced accessibility attributes with WCAG 2.1 AA compliance
  accessibility_attrs = security_aria_attributes(type, user, context)

  # Rich tooltip content for progressive disclosure
  tooltip_content = show_tooltip ? security_tooltip_content(type, user, context) : nil
%>

<% if interactive %>
  <%# Sophisticated interactive security item with micro-interactions %>
  <div class="<%= container_classes %>"
       role="button"
       tabindex="0"
       <%= accessibility_attrs.map { |k, v| %(#{k}="#{v}") }.join(' ').html_safe %>
       data-controller="security-item"
       data-security-item-type="<%= type %>"
       data-security-item-score="<%= current_status[:score] %>"
       data-security-item-level="<%= current_status[:level] %>"
       data-action="click->security-item#showDetails keydown.enter->security-item#showDetails keydown.space->security-item#showDetails"
       <%= tooltip_content ? %(data-bs-toggle="tooltip" data-bs-html="true" data-bs-title="#{escape_javascript(tooltip_content[:description])}" data-bs-custom-class="security-tooltip-#{current_status[:level]}").html_safe : '' %>>

    <%# Advanced visual hierarchy with semantic iconography %>
    <div class="security-visual-container">
      <% if icon %>
        <div class="custom-icon-wrapper">
          <%= icon %>
        </div>
      <% else %>
        <div class="sophisticated-security-icon"
             role="img"
             aria-label="<%= current_status[:label] %> icon">
          <%= security_icon_for_type(type, user, context) %>
        </div>
      <% end %>

      <%# Progressive score visualization with micro-animations %>
      <div class="security-score-indicator">
        <div class="score-ring"
             style="--score-percentage: <%= current_status[:score] %>%"
             role="progressbar"
             aria-valuenow="<%= current_status[:score] %>"
             aria-valuemin="0"
             aria-valuemax="100"
             aria-label="Security score: <%= current_status[:score] %>%">
        </div>
        <span class="score-text" aria-hidden="true"><%= current_status[:score] %></span>
      </div>
    </div>

    <%# Contextual information display with intelligent truncation %>
    <div class="security-content">
      <h3 class="security-title">
        <%= text %>
        <% if current_status[:level] == :critical %>
          <span class="critical-indicator" aria-label="Critical security issue requires immediate attention">‚ö†Ô∏è</span>
        <% end %>
      </h3>

      <%# Intelligent status description with contextual relevance %>
      <p class="security-description">
        <%= truncate(current_status[:description], length: 120, separator: ' ') %>
      </p>

      <%# Sophisticated compliance badges with semantic meaning %>
      <% if current_status[:compliance]&.any? %>
        <div class="compliance-badges" role="list" aria-label="Compliance certifications">
          <% current_status[:compliance].first(3).each do |badge| %>
            <span class="compliance-badge compliance-<%= badge %>"
                  role="listitem"
                  aria-label="<%= badge.to_s.humanize %> compliant">
              <%= badge.to_s.humanize %>
            </span>
          <% end %>
          <% if current_status[:compliance].size > 3 %>
            <span class="compliance-badge-more"
                  aria-label="<%= current_status[:compliance].size - 3 %> additional compliance certifications">
              +<%= current_status[:compliance].size - 3 %>
            </span>
          <% end %>
        </div>
      <% end %>

      <%# Intelligent recommendations with priority-based display %>
      <% if current_status[:recommendations]&.any? && current_status[:level] != :optimal %>
        <div class="security-recommendations">
          <span class="recommendations-trigger"
                aria-expanded="false"
                role="button"
                tabindex="0"
                data-action="click->security-item#toggleRecommendations">
            üí° <%= current_status[:recommendations].size %> suggestion<%= 's' if current_status[:recommendations].size != 1 %>
          </span>
          <div class="recommendations-panel hidden"
               aria-hidden="true"
               data-security-item-target="recommendations">
            <% current_status[:recommendations].each_with_index do |recommendation, index| %>
              <div class="recommendation-item"
                   role="listitem"
                   style="--delay: <%= index * 0.1 %>s">
                <%= recommendation %>
              </div>
            <% end %>
          </div>
        </div>
      <% end %>

      <%# Real-time assessment timestamp with intelligent formatting %>
      <div class="security-metadata">
        <time class="last-assessed"
              datetime="<%= current_status[:last_assessed]&.iso8601 %>"
              title="Last assessed: <%= current_status[:last_assessed]&.strftime('%B %d, %Y at %I:%M %p') %>">
          Updated <%= time_ago_in_words(current_status[:last_assessed]) %> ago
        </time>
      </div>
    </div>

    <%# Sophisticated interaction indicators %>
    <div class="interaction-hints" aria-hidden="true">
      <div class="hover-indicator"></div>
      <div class="focus-indicator"></div>
    </div>
  </div>

<% else %>
  <%# Simplified non-interactive security item for performance-critical contexts %>
  <div class="<%= container_classes %> non-interactive"
       <%= accessibility_attrs.map { |k, v| %(#{k}="#{v}") }.join(' ').html_safe %>>

    <%# Streamlined visual presentation %>
    <div class="security-visual-container-simplified">
      <% if icon %>
        <div class="custom-icon-wrapper">
          <%= icon %>
        </div>
      <% else %>
        <div class="sophisticated-security-icon">
          <%= security_icon_for_type(type, user, context) %>
        </div>
      <% end %>

      <%# Minimal score indicator %>
      <div class="score-indicator-minimal">
        <span class="score-text-minimal"><%= current_status[:score] %></span>
      </div>
    </div>

    <%# Essential information only %>
    <div class="security-content-minimal">
      <div class="security-title"><%= text %></div>
      <div class="security-status-minimal"><%= current_status[:label] %></div>
    </div>
  </div>
<% end %>

<%#
  Sophisticated CSS integration for extraordinary visual experience
  Implements advanced design system with performance optimization
%>
<style scoped>
/* Enterprise-grade security component styles */
.security-item-component {
  position: relative;
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1.25rem;
  border-radius: 0.75rem;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  cursor: pointer;
  border: 1px solid rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  overflow: hidden;
}

/* Sophisticated gradient system based on security level */
.security-status-optimal {
  background: linear-gradient(135deg, #10b981 0%, #059669 100%);
  box-shadow: 0 10px 25px rgba(16, 185, 129, 0.3);
}

.security-status-enhanced {
  background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
  box-shadow: 0 10px 25px rgba(59, 130, 246, 0.3);
}

.security-status-standard {
  background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
  box-shadow: 0 10px 25px rgba(245, 158, 11, 0.3);
}

.security-status-at-risk {
  background: linear-gradient(135deg, #f97316 0%, #ea580c 100%);
  box-shadow: 0 10px 25px rgba(249, 115, 22, 0.3);
}

.security-status-critical {
  background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
  box-shadow: 0 10px 25px rgba(239, 68, 68, 0.4);
  animation: critical-pulse 2s infinite;
}

.security-status-unknown {
  background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
  box-shadow: 0 10px 25px rgba(107, 114, 128, 0.3);
}

/* Advanced visual hierarchy */
.security-visual-container {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: 3rem;
  min-height: 3rem;
}

.sophisticated-security-icon {
  font-size: 1.5rem;
  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));
  transition: transform 0.2s ease;
}

.security-score-indicator {
  position: absolute;
  bottom: -2px;
  right: -2px;
  width: 1.5rem;
  height: 1.5rem;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.75rem;
  font-weight: 600;
  color: white;
  background: rgba(0, 0, 0, 0.7);
  backdrop-filter: blur(4px);
}

.score-ring {
  position: absolute;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  background: conic-gradient(
    from 0deg,
    transparent calc(var(--score-percentage) * 3.6deg),
    currentColor calc(var(--score-percentage) * 3.6deg)
  );
  opacity: 0.3;
}

/* Contextual content styling */
.security-content {
  flex: 1;
  min-width: 0;
}

.security-title {
  font-size: 1.125rem;
  font-weight: 600;
  margin: 0 0 0.5rem 0;
  color: white;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.critical-indicator {
  animation: bounce 1s infinite;
  font-size: 0.875rem;
}

.security-description {
  font-size: 0.875rem;
  color: rgba(255, 255, 255, 0.9);
  margin: 0 0 0.75rem 0;
  line-height: 1.4;
}

/* Sophisticated compliance badge system */
.compliance-badges {
  display: flex;
  flex-wrap: wrap;
  gap: 0.25rem;
  margin: 0 0 0.75rem 0;
}

.compliance-badge {
  padding: 0.125rem 0.5rem;
  border-radius: 0.25rem;
  font-size: 0.75rem;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.025em;
}

.compliance-badge-more {
  padding: 0.125rem 0.5rem;
  border-radius: 0.25rem;
  font-size: 0.75rem;
  background: rgba(255, 255, 255, 0.2);
  color: rgba(255, 255, 255, 0.9);
}

/* Interactive recommendations system */
.security-recommendations {
  margin: 0.75rem 0 0 0;
}

.recommendations-trigger {
  font-size: 0.875rem;
  color: rgba(255, 255, 255, 0.8);
  cursor: pointer;
  transition: color 0.2s ease;
}

.recommendations-trigger:hover {
  color: white;
}

.recommendations-panel {
  margin-top: 0.5rem;
  padding: 0.75rem;
  background: rgba(0, 0, 0, 0.2);
  border-radius: 0.5rem;
  backdrop-filter: blur(8px);
}

.recommendation-item {
  font-size: 0.875rem;
  color: rgba(255, 255, 255, 0.9);
  margin: 0.5rem 0;
  padding-left: 1rem;
  position: relative;
  animation: slide-in 0.3s ease forwards;
  animation-delay: var(--delay);
  opacity: 0;
  transform: translateX(-10px);
}

.recommendation-item::before {
  content: '‚Üí';
  position: absolute;
  left: 0;
  color: rgba(255, 255, 255, 0.6);
}

/* Metadata styling */
.security-metadata {
  margin-top: 0.5rem;
}

.last-assessed {
  font-size: 0.75rem;
  color: rgba(255, 255, 255, 0.6);
}

/* Interaction feedback system */
.interaction-hints {
  position: absolute;
  inset: 0;
  pointer-events: none;
  border-radius: inherit;
}

.hover-indicator {
  position: absolute;
  inset: 0;
  border-radius: inherit;
  background: radial-gradient(circle at var(--mouse-x, 50%) var(--mouse-y, 50%), rgba(255, 255, 255, 0.1) 0%, transparent 50%);
  opacity: 0;
  transition: opacity 0.2s ease;
}

.focus-indicator {
  position: absolute;
  inset: -2px;
  border-radius: calc(0.75rem + 2px);
  border: 2px solid rgba(255, 255, 255, 0.5);
  opacity: 0;
  transition: opacity 0.2s ease;
}

/* Micro-interactions and animations */
.security-item-component:hover .hover-indicator {
  opacity: 1;
}

.security-item-component:focus {
  outline: none;
}

.security-item-component:focus .focus-indicator {
  opacity: 1;
}

.security-item-component:hover .sophisticated-security-icon {
  transform: scale(1.1);
}

.animate-pulse-subtle {
  animation: pulse-subtle 3s ease-in-out infinite;
}

.animate-pulse-caution {
  animation: pulse-caution 2s ease-in-out infinite;
}

.animate-pulse-danger {
  animation: pulse-danger 1.5s ease-in-out infinite;
}

/* Accessibility enhancements */
@media (prefers-reduced-motion: reduce) {
  .security-item-component,
  .sophisticated-security-icon,
  .animate-pulse-subtle,
  .animate-pulse-caution,
  .animate-pulse-danger {
    animation: none;
    transition: none;
  }
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  .security-item-component {
    border: 2px solid white;
  }

  .security-description,
  .last-assessed {
    color: white;
  }
}

/* Responsive design */
@media (max-width: 640px) {
  .security-item-component {
    padding: 1rem;
    gap: 0.75rem;
  }

  .security-title {
    font-size: 1rem;
  }

  .security-description {
    font-size: 0.8125rem;
  }
}

/* Performance optimizations */
.security-item-component {
  contain: layout style paint;
  will-change: transform;
}

/* Sophisticated keyframe animations */
@keyframes critical-pulse {
  0%, 100% {
    box-shadow: 0 10px 25px rgba(239, 68, 68, 0.4);
  }
  50% {
    box-shadow: 0 15px 35px rgba(239, 68, 68, 0.6);
  }
}

@keyframes pulse-subtle {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.9;
  }
}

@keyframes pulse-caution {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.8;
  }
}

@keyframes pulse-danger {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.7;
  }
}

@keyframes slide-in {
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes bounce {
  0%, 20%, 53%, 80%, 100% {
    transform: translate3d(0, 0, 0);
  }
  40%, 43% {
    transform: translate3d(0, -8px, 0);
  }
  70% {
    transform: translate3d(0, -4px, 0);
  }
  90% {
    transform: translate3d(0, -2px, 0);
  }
}
</style>

<%#
  Advanced JavaScript integration for sophisticated interactions
  Implements progressive enhancement with graceful degradation
%>
<% if interactive %>
  <script>
    // Enterprise-grade security item controller
    class SecurityItemController extends Stimulus.Controller {
      static targets = ['recommendations']

      connect() {
        this.initializeComponent()
        this.setupEventListeners()
        this.preloadSecurityDetails()
      }

      disconnect() {
        this.cleanup()
      }

      initializeComponent() {
        // Sophisticated initialization with performance monitoring
        this.performanceMarks = new Map()
        this.markPerformance('initialization-start')

        this.securityType = this.element.dataset.securityItemType
        this.securityScore = parseFloat(this.element.dataset.securityItemScore) || 0
        this.securityLevel = this.element.dataset.securityItemLevel

        // Advanced state management
        this.state = {
          recommendationsExpanded: false,
          detailsLoaded: false,
          interactionCount: 0
        }

        this.markPerformance('initialization-complete')
      }

      setupEventListeners() {
        // Sophisticated event delegation with memory leak prevention
        this.boundShowDetails = this.showDetails.bind(this)
        this.boundToggleRecommendations = this.toggleRecommendations.bind(this)
        this.boundHandleKeyboard = this.handleKeyboard.bind(this)

        this.element.addEventListener('click', this.boundShowDetails)
        this.element.addEventListener('keydown', this.boundHandleKeyboard)

        // Advanced tooltip management
        if (window.bootstrap && bootstrap.Tooltip) {
          this.tooltip = new bootstrap.Tooltip(this.element, {
            trigger: 'hover focus',
            customClass: `security-tooltip-${this.securityLevel}`,
            html: true,
            placement: 'auto'
          })
        }

        // Progressive enhancement for advanced interactions
        this.setupAdvancedInteractions()
      }

      setupAdvancedInteractions() {
        // Mouse tracking for sophisticated hover effects
        this.mouseTracker = {
          x: 0,
          y: 0,
          rafId: null
        }

        this.element.addEventListener('mousemove', (e) => {
          this.mouseTracker.x = e.clientX
          this.mouseTracker.y = e.clientY
          this.updateHoverIndicator()
        })

        // Touch optimization for mobile devices
        this.setupTouchOptimizations()
      }

      setupTouchOptimizations() {
        // Sophisticated touch handling with gesture recognition
        let touchStartTime = 0
        let longPressTimer = null

        this.element.addEventListener('touchstart', (e) => {
          touchStartTime = Date.now()
          longPressTimer = setTimeout(() => {
            this.handleLongPress(e)
          }, 500)
        }, { passive: true })

        this.element.addEventListener('touchend', () => {
          if (longPressTimer) {
            clearTimeout(longPressTimer)
          }
          const touchDuration = Date.now() - touchStartTime
          if (touchDuration < 300) {
            this.handleTap()
          }
        }, { passive: true })
      }

      updateHoverIndicator() {
        // Cancel previous animation frame
        if (this.mouseTracker.rafId) {
          cancelAnimationFrame(this.mouseTracker.rafId)
        }

        // Smooth hover indicator updates
        this.mouseTracker.rafId = requestAnimationFrame(() => {
          const indicator = this.element.querySelector('.hover-indicator')
          if (indicator) {
            indicator.style.setProperty('--mouse-x', `${this.mouseTracker.x}px`)
            indicator.style.setProperty('--mouse-y', `${this.mouseTracker.y}px`)
          }
        })
      }

      async showDetails() {
        this.markPerformance('show-details-start')

        // Track user interactions for analytics
        this.state.interactionCount++

        try {
          // Progressive enhancement with lazy loading
          if (!this.state.detailsLoaded) {
            await this.loadSecurityDetails()
          }

          // Sophisticated modal or overlay presentation
          this.presentSecurityDetails()

          // Update interaction state
          this.element.setAttribute('aria-expanded', 'true')

        } catch (error) {
          console.error('Failed to show security details:', error)
          this.handleError(error)
        }

        this.markPerformance('show-details-complete')
      }

      async loadSecurityDetails() {
        // Sophisticated lazy loading with caching
        const cacheKey = `security-details-${this.securityType}-${this.securityScore}`

        try {
          // Check cache first
          const cachedData = sessionStorage.getItem(cacheKey)
          if (cachedData) {
            this.securityDetails = JSON.parse(cachedData)
            this.state.detailsLoaded = true
            return
          }

          // Load detailed security information
          const response = await fetch(`/api/security-details`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({
              type: this.securityType,
              score: this.securityScore,
              level: this.securityLevel
            })
          })

          if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`)
          }

          this.securityDetails = await response.json()
          this.state.detailsLoaded = true

          // Cache the results
          sessionStorage.setItem(cacheKey, JSON.stringify(this.securityDetails))

        } catch (error) {
          console.error('Failed to load security details:', error)
          this.securityDetails = this.getFallbackSecurityDetails()
        }
      }

      presentSecurityDetails() {
        // Sophisticated presentation logic with multiple display modes
        const presentationMode = this.determinePresentationMode()

        switch (presentationMode) {
          case 'modal':
            this.presentAsModal()
            break
          case 'sidebar':
            this.presentAsSidebar()
            break
          case 'inline':
            this.presentInline()
            break
          default:
            this.presentAsTooltip()
        }
      }

      determinePresentationMode() {
        // Intelligent presentation mode selection based on context
        const viewportWidth = window.innerWidth
        const availableSpace = this.calculateAvailableSpace()

        if (viewportWidth < 768) {
          return 'modal'
        } else if (availableSpace > 400) {
          return 'sidebar'
        } else {
          return 'inline'
        }
      }

      calculateAvailableSpace() {
        // Sophisticated space calculation for optimal presentation
        const rect = this.element.getBoundingClientRect()
        return window.innerWidth - rect.right
      }

      presentAsModal() {
        // Advanced modal presentation with backdrop and animations
        const modal = document.createElement('div')
        modal.className = 'security-details-modal'
        modal.innerHTML = this.generateModalContent()

        // Sophisticated modal management
        modal.addEventListener('click', (e) => {
          if (e.target === modal) {
            this.closeModal(modal)
          }
        })

        document.body.appendChild(modal)
        requestAnimationFrame(() => modal.classList.add('active'))

        // Focus management for accessibility
        const firstFocusable = modal.querySelector('[autofocus], [tabindex="0"]')
        if (firstFocusable) {
          firstFocusable.focus()
        }
      }

      presentAsSidebar() {
        // Sidebar presentation for desktop environments
        const sidebar = document.createElement('div')
        sidebar.className = 'security-details-sidebar'
        sidebar.innerHTML = this.generateSidebarContent()

        document.body.appendChild(sidebar)
        requestAnimationFrame(() => sidebar.classList.add('active'))
      }

      presentInline() {
        // Inline expansion for constrained spaces
        this.element.classList.add('expanded')
        const detailsContainer = document.createElement('div')
        detailsContainer.className = 'security-details-inline'
        detailsContainer.innerHTML = this.generateInlineContent()

        this.element.appendChild(detailsContainer)
      }

      generateModalContent() {
        // Sophisticated modal content generation
        return `
          <div class="security-details-modal-content">
            <div class="security-details-header">
              <h2>${this.securityDetails.title}</h2>
              <button class="security-details-close" aria-label="Close security details">&times;</button>
            </div>
            <div class="security-details-body">
              ${this.generateDetailedContent()}
            </div>
            <div class="security-details-footer">
              <button class="btn btn-primary">Take Action</button>
              <button class="btn btn-secondary">Learn More</button>
            </div>
          </div>
        `
      }

      generateDetailedContent() {
        // Advanced content generation with rich formatting
        return `
          <div class="security-details-grid">
            <div class="security-score-breakdown">
              <h3>Score Breakdown</h3>
              ${this.generateScoreVisualization()}
            </div>
            <div class="security-recommendations-detailed">
              <h3>Recommendations</h3>
              ${this.generateRecommendationList()}
            </div>
            <div class="security-compliance-status">
              <h3>Compliance Status</h3>
              ${this.generateComplianceGrid()}
            </div>
          </div>
        `
      }

      toggleRecommendations() {
        // Sophisticated recommendations panel management
        const trigger = this.element.querySelector('.recommendations-trigger')
        const panel = this.element.querySelector('.recommendations-panel')

        if (!panel) return

        this.state.recommendationsExpanded = !this.state.recommendationsExpanded

        if (this.state.recommendationsExpanded) {
          panel.classList.remove('hidden')
          panel.setAttribute('aria-hidden', 'false')
          trigger.setAttribute('aria-expanded', 'true')

          // Animate recommendations
          this.animateRecommendations(panel)
        } else {
          panel.classList.add('hidden')
          panel.setAttribute('aria-hidden', 'true')
          trigger.setAttribute('aria-expanded', 'false')
        }
      }

      animateRecommendations(panel) {
        // Sophisticated staggered animation for recommendation items
        const items = panel.querySelectorAll('.recommendation-item')
        items.forEach((item, index) => {
          item.style.animationDelay = `${index * 0.1}s`
          item.classList.add('animate-in')
        })
      }

      handleKeyboard(e) {
        // Advanced keyboard navigation support
        switch (e.key) {
          case 'Enter':
          case ' ':
            e.preventDefault()
            this.showDetails()
            break
          case 'Escape':
            if (this.state.recommendationsExpanded) {
              e.preventDefault()
              this.toggleRecommendations()
            }
            break
          case 'ArrowDown':
            if (!this.state.recommendationsExpanded) {
              e.preventDefault()
              this.toggleRecommendations()
            }
            break
          case 'ArrowUp':
            if (this.state.recommendationsExpanded) {
              e.preventDefault()
              this.toggleRecommendations()
            }
            break
        }
      }

      handleLongPress(e) {
        // Sophisticated long press handling for mobile
        this.showContextMenu(e)
      }

      handleTap() {
        // Quick tap handling for mobile interactions
        this.showDetails()
      }

      showContextMenu(e) {
        // Advanced context menu for power users
        const menu = document.createElement('div')
        menu.className = 'security-context-menu'
        menu.innerHTML = `
          <div class="context-menu-item" data-action="click->security-item#exportReport">
            üìä Export Security Report
          </div>
          <div class="context-menu-item" data-action="click->security-item#shareStatus">
            üîó Share Security Status
          </div>
          <div class="context-menu-item" data-action="click->security-item#scheduleAssessment">
            ‚è∞ Schedule Re-assessment
          </div>
        `

        // Position context menu intelligently
        const rect = this.element.getBoundingClientRect()
        menu.style.left = `${e.touches[0].clientX}px`
        menu.style.top = `${e.touches[0].clientY}px`

        document.body.appendChild(menu)
      }

      async exportReport() {
        // Sophisticated report generation and export
        try {
          const reportData = await this.generateSecurityReport()
          const blob = new Blob([JSON.stringify(reportData, null, 2)], {
            type: 'application/json'
          })

          const url = URL.createObjectURL(blob)
          const a = document.createElement('a')
          a.href = url
          a.download = `security-report-${this.securityType}-${Date.now()}.json`
          a.click()

          URL.revokeObjectURL(url)
        } catch (error) {
          console.error('Failed to export security report:', error)
        }
      }

      async generateSecurityReport() {
        // Comprehensive security report generation
        return {
          type: this.securityType,
          score: this.securityScore,
          level: this.securityLevel,
          assessment: this.securityDetails,
          recommendations: this.securityDetails.recommendations,
          compliance: this.securityDetails.compliance,
          exportedAt: new Date().toISOString(),
          version: '1.0.0'
        }
      }

      preloadSecurityDetails() {
        // Intelligent preloading for performance optimization
        if (this.shouldPreload()) {
          this.loadSecurityDetails()
        }
      }

      shouldPreload() {
        // Sophisticated preloading decisions based on user behavior
        return this.state.interactionCount > 0 ||
               this.securityLevel === 'critical' ||
               this.securityLevel === 'at_risk'
      }

      markPerformance(mark) {
        // Performance monitoring for optimization insights
        this.performanceMarks.set(mark, performance.now())
      }

      getPerformanceMetrics() {
        // Sophisticated performance analysis
        const metrics = {}
        const marks = Array.from(this.performanceMarks.entries())

        for (let i = 1; i < marks.length; i++) {
          const [currentMark, currentTime] = marks[i]
          const [previousMark, previousTime] = marks[i - 1]
          metrics[`${previousMark}-to-${currentMark}`] = currentTime - previousTime
        }

        return metrics
      }

      handleError(error) {
        // Sophisticated error handling with user feedback
        console.error('Security item error:', error)

        // Show user-friendly error message
        this.showErrorMessage('Unable to load security details. Please try again.')

        // Report error for monitoring
        this.reportError(error)
      }

      showErrorMessage(message) {
        // User-friendly error presentation
        const notification = document.createElement('div')
        notification.className = 'security-error-notification'
        notification.textContent = message
        notification.setAttribute('role', 'alert')

        this.element.appendChild(notification)

        setTimeout(() => {
          notification.remove()
        }, 5000)
      }

      async reportError(error) {
        // Error reporting for monitoring and debugging
        try {
          await fetch('/api/errors', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              component: 'SecurityItem',
              error: error.message,
              stack: error.stack,
              securityType: this.securityType,
              timestamp: new Date().toISOString()
            })
          })
        } catch (reportError) {
          console.error('Failed to report error:', reportError)
        }
      }

      cleanup() {
        // Sophisticated cleanup to prevent memory leaks
        if (this.tooltip) {
          this.tooltip.dispose()
        }

        if (this.mouseTracker.rafId) {
          cancelAnimationFrame(this.mouseTracker.rafId)
        }

        // Remove event listeners
        this.element.removeEventListener('click', this.boundShowDetails)
        this.element.removeEventListener('keydown', this.boundHandleKeyboard)

        // Clear performance marks
        this.performanceMarks.clear()
      }
    }

    // Register the controller for sophisticated functionality
    if (window.Stimulus) {
      window.Stimulus.register('security-item', SecurityItemController)
    }
  </script>
<% end %>

<%#
  Advanced Stimulus controller definition for Rails integration
  Implements sophisticated state management and performance optimization
%>
<%= tag.div data: {
  controller: 'security-item',
  security_item_type: type,
  security_item_score: current_status[:score],
  security_item_level: current_status[:level],
  action: 'click->security-item#showDetails'
} do %>
<% end %>